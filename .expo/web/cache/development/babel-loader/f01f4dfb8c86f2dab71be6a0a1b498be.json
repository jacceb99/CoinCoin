{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport coinMarketData from \"./coinMarketData\";\nimport coinIDData from \"../api/coinIDData\";\nimport React, { useState, useEffect } from \"react\";\nimport storeCoinID from \"./storeCoinId\";\n\nfunction storeMarketData(props) {\n  useEffect(function () {\n    loadCoinMarketData();\n    loadCoinIDData();\n  }, []);\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      coinMarket = _useState2[0],\n      setCoinMarket = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      coinID = _useState4[0],\n      setCoinID = _useState4[1];\n\n  var loadCoinIDData = function loadCoinIDData() {\n    var response;\n    return _regeneratorRuntime.async(function loadCoinIDData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(coinIDData.getCoinIDData());\n\n          case 2:\n            response = _context.sent;\n            setCoinID(response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var loadCoinMarketData = function loadCoinMarketData() {\n    var marketResponse;\n    return _regeneratorRuntime.async(function loadCoinMarketData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(loadCoinIDData());\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(coinMarketData.getCoinMarketData(coinID[0]));\n\n          case 4:\n            marketResponse = _context2.sent;\n            setCoinMarket(marketResponse.data);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  console.log(\"CoinMarketen:\", coinMarket);\n  return coinMarket;\n}\n\nexport default storeMarketData;","map":{"version":3,"sources":["C:/Users/jacob/AwesomeProject/app/api/storeMarketData.js"],"names":["coinMarketData","coinIDData","React","useState","useEffect","storeCoinID","storeMarketData","props","loadCoinMarketData","loadCoinIDData","coinMarket","setCoinMarket","coinID","setCoinID","getCoinIDData","response","data","getCoinMarketData","marketResponse","console","log"],"mappings":";;AAAA,OAAOA,cAAP;AACA,OAAOC,UAAP;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BH,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,kBAAkB;AAClBC,IAAAA,cAAc;AACf,GAHQ,EAGN,EAHM,CAAT;;AAD8B,kBAMMN,QAAQ,CAAC,EAAD,CANd;AAAA;AAAA,MAMvBO,UANuB;AAAA,MAMXC,aANW;;AAAA,mBAOFR,QAAQ,CAAC,EAAD,CAPN;AAAA;AAAA,MAOvBS,MAPuB;AAAA,MAOfC,SAPe;;AAS9B,MAAMJ,cAAc,GAAG,SAAjBA,cAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACER,UAAU,CAACa,aAAX,EADF;;AAAA;AACfC,YAAAA,QADe;AAErBF,YAAAA,SAAS,CAACE,QAAQ,CAACC,IAAV,CAAT;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAMA,MAAMR,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACnBC,cAAc,EADK;;AAAA;AAAA;AAAA,6CAEIT,cAAc,CAACiB,iBAAf,CAAiCL,MAAM,CAAC,CAAD,CAAvC,CAFJ;;AAAA;AAEnBM,YAAAA,cAFmB;AAGzBP,YAAAA,aAAa,CAACO,cAAc,CAACF,IAAhB,CAAb;;AAHyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAKAG,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BV,UAA7B;AACA,SAAOA,UAAP;AACD;;AAED,eAAeJ,eAAf","sourcesContent":["import coinMarketData from \"./coinMarketData\";\r\nimport coinIDData from \"../api/coinIDData\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport storeCoinID from \"./storeCoinId\";\r\n\r\nfunction storeMarketData(props) {\r\n  useEffect(() => {\r\n    loadCoinMarketData();\r\n    loadCoinIDData();\r\n  }, []);\r\n\r\n  const [coinMarket, setCoinMarket] = useState([]);\r\n  const [coinID, setCoinID] = useState([]);\r\n\r\n  const loadCoinIDData = async () => {\r\n    const response = await coinIDData.getCoinIDData();\r\n    setCoinID(response.data);\r\n  };\r\n\r\n  //Loading marketdata\r\n  const loadCoinMarketData = async () => {\r\n    await loadCoinIDData();\r\n    const marketResponse = await coinMarketData.getCoinMarketData(coinID[0]);\r\n    setCoinMarket(marketResponse.data);\r\n  };\r\n  console.log(\"CoinMarketen:\", coinMarket);\r\n  return coinMarket;\r\n}\r\n\r\nexport default storeMarketData;\r\n"]},"metadata":{},"sourceType":"module"}