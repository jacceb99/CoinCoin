{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nexport default useApi = function useApi(apiFunc) {\n  var addToArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  setData(\"Empty\");\n\n  var request = function request() {\n    var response,\n        newArray,\n        _args = arguments;\n    return _regeneratorRuntime.async(function request$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setLoading(true);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(apiFunc.apply(void 0, _args));\n\n          case 3:\n            response = _context.sent;\n            setLoading(false);\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setError(true));\n\n          case 7:\n            setError(false);\n\n            if (addToArray) {\n              newArray = [].concat(_toConsumableArray(data), [response.data[0]]);\n              setData(newArray);\n            } else {\n              setData(response.data);\n            }\n\n            console.log(\"Data has been succesfully called:\", data);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return {\n    data: data,\n    error: error,\n    loading: loading,\n    request: request\n  };\n};","map":{"version":3,"sources":["C:/Users/jacob/AwesomeProject/app/Hooks/useApi.js"],"names":["useState","useApi","apiFunc","addToArray","data","setData","error","setError","loading","setLoading","request","response","ok","newArray","console","log"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAeC,MAAM,GAAG,gBAACC,OAAD,EAAiC;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;;AAAA,kBAC/BH,QAAQ,CAAC,EAAD,CADuB;AAAA;AAAA,MAChDI,IADgD;AAAA,MAC1CC,OAD0C;;AAAA,mBAE7BL,QAAQ,CAAC,KAAD,CAFqB;AAAA;AAAA,MAEhDM,KAFgD;AAAA,MAEzCC,QAFyC;;AAAA,mBAGzBP,QAAQ,CAAC,KAAD,CAHiB;AAAA;AAAA,MAGhDQ,OAHgD;AAAA,MAGvCC,UAHuC;;AAKvDJ,EAAAA,OAAO,CAAC,OAAD,CAAP;;AAGA,MAAMK,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACdD,YAAAA,UAAU,CAAC,IAAD,CAAV;AADc;AAAA,6CAESP,OAAO,MAAP,eAFT;;AAAA;AAERS,YAAAA,QAFQ;AAGdF,YAAAA,UAAU,CAAC,KAAD,CAAV;;AAHc,gBAITE,QAAQ,CAACC,EAJA;AAAA;AAAA;AAAA;;AAAA,6CAIWL,QAAQ,CAAC,IAAD,CAJnB;;AAAA;AAMdA,YAAAA,QAAQ,CAAC,KAAD,CAAR;;AAEA,gBAAIJ,UAAJ,EAAgB;AACVU,cAAAA,QADU,gCACKT,IADL,IACWO,QAAQ,CAACP,IAAT,CAAc,CAAd,CADX;AAEdC,cAAAA,OAAO,CAACQ,QAAD,CAAP;AACD,aAHD,MAGO;AACLR,cAAAA,OAAO,CAACM,QAAQ,CAACP,IAAV,CAAP;AACD;;AACDU,YAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDX,IAAjD;;AAdc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAgBA,SAAO;AAAEA,IAAAA,IAAI,EAAJA,IAAF;AAAQE,IAAAA,KAAK,EAALA,KAAR;AAAeE,IAAAA,OAAO,EAAPA,OAAf;AAAwBE,IAAAA,OAAO,EAAPA;AAAxB,GAAP;AACD,CAzBD","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default useApi = (apiFunc, addToArray = false) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  setData(\"Empty\");\r\n\r\n  //Loading marketdata\r\n  const request = async (...args) => {\r\n    setLoading(true);\r\n    const response = await apiFunc(...args);\r\n    setLoading(false);\r\n    if (!response.ok) return setError(true);\r\n\r\n    setError(false);\r\n\r\n    if (addToArray) {\r\n      var newArray = [...data, response.data[0]]; //\r\n      setData(newArray);\r\n    } else {\r\n      setData(response.data);\r\n    }\r\n    console.log(\"Data has been succesfully called:\", data);\r\n  };\r\n  return { data, error, loading, request };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}