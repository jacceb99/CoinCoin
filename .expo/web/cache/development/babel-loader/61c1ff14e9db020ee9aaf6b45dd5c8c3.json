{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState } from \"react\";\nexport default useApi = function useApi(apiFunc) {\n  var addToArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var request = function request() {\n    var response,\n        _args = arguments;\n    return _regeneratorRuntime.async(function request$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setData(0);\n            setLoading(true);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(apiFunc.apply(void 0, _args).then(function (value) {\n              setLoading(false);\n              if (!value.ok) return setError(true);\n              setError(false);\n\n              if (addToArray) {\n                var newArray = [].concat(_toConsumableArray(data), [value.data[0]]);\n                setData(newArray);\n              } else {\n                setData(value.data);\n              }\n\n              console.log(\"Data has been succesfully called:\", data);\n              return data;\n            }));\n\n          case 4:\n            response = _context.sent;\n            return _context.abrupt(\"return\", {\n              response: response,\n              error: error,\n              loading: loading,\n              request: request\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["C:/Users/jacob/AwesomeProject/app/Hooks/useApi.js"],"names":["useState","useApi","apiFunc","addToArray","data","setData","error","setError","loading","setLoading","request","then","value","ok","newArray","console","log","response"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAeC,MAAM,GAAG,gBAACC,OAAD,EAAiC;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;;AAAA,kBAC/BH,QAAQ,CAAC,EAAD,CADuB;AAAA;AAAA,MAChDI,IADgD;AAAA,MAC1CC,OAD0C;;AAAA,mBAE7BL,QAAQ,CAAC,KAAD,CAFqB;AAAA;AAAA,MAEhDM,KAFgD;AAAA,MAEzCC,QAFyC;;AAAA,mBAGzBP,QAAQ,CAAC,KAAD,CAHiB;AAAA;AAAA,MAGhDQ,OAHgD;AAAA,MAGvCC,UAHuC;;AAMvD,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACdL,YAAAA,OAAO,CAAC,CAAD,CAAP;AACAI,YAAAA,UAAU,CAAC,IAAD,CAAV;AAFc;AAAA,6CAGSP,OAAO,MAAP,gBAAiBS,IAAjB,CAAsB,UAACC,KAAD,EAAW;AACtDH,cAAAA,UAAU,CAAC,KAAD,CAAV;AACA,kBAAI,CAACG,KAAK,CAACC,EAAX,EAAe,OAAON,QAAQ,CAAC,IAAD,CAAf;AAEfA,cAAAA,QAAQ,CAAC,KAAD,CAAR;;AAEA,kBAAIJ,UAAJ,EAAgB;AACd,oBAAIW,QAAQ,gCAAOV,IAAP,IAAaQ,KAAK,CAACR,IAAN,CAAW,CAAX,CAAb,EAAZ;AACAC,gBAAAA,OAAO,CAACS,QAAD,CAAP;AACD,eAHD,MAGO;AACLT,gBAAAA,OAAO,CAACO,KAAK,CAACR,IAAP,CAAP;AACD;;AACDW,cAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDZ,IAAjD;AACA,qBAAOA,IAAP;AACD,aAdsB,CAHT;;AAAA;AAGRa,YAAAA,QAHQ;AAAA,6CAkBP;AAAEA,cAAAA,QAAQ,EAARA,QAAF;AAAYX,cAAAA,KAAK,EAALA,KAAZ;AAAmBE,cAAAA,OAAO,EAAPA,OAAnB;AAA4BE,cAAAA,OAAO,EAAPA;AAA5B,aAlBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;AAoBD,CA1BD","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport default useApi = (apiFunc, addToArray = false) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  //Loading marketdata\r\n  const request = async (...args) => {\r\n    setData(0);\r\n    setLoading(true);\r\n    const response = await apiFunc(...args).then((value) => {\r\n      setLoading(false);\r\n      if (!value.ok) return setError(true);\r\n\r\n      setError(false);\r\n\r\n      if (addToArray) {\r\n        var newArray = [...data, value.data[0]]; //\r\n        setData(newArray);\r\n      } else {\r\n        setData(value.data);\r\n      }\r\n      console.log(\"Data has been succesfully called:\", data);\r\n      return data;\r\n    });\r\n    return { response, error, loading, request };\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}