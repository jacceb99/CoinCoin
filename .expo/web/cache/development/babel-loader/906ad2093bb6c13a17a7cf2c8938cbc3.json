{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jacob\\\\AwesomeProject\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from \"react\";\nimport WatchlistScreen from \"./app/screens/WatchlistScreen\";\nimport LoginScreen from \"./app/screens/LoginScreen\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScreenArea from \"./app/components/ScreenArea\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageUri = _useState2[0],\n      setImageUri = _useState2[1];\n\n  var requestPermission = function requestPermission() {\n    var _await$ImagePicker$re, granted;\n\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            _await$ImagePicker$re = _context.sent;\n            granted = _await$ImagePicker$re.granted;\n            if (!granted) alert(\"You need to able permission to access gallery\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    requestPermission();\n  }, []);\n\n  var selectImage = function selectImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 3:\n            result = _context2.sent;\n            if (!result.cancelled) setImageUri(result.uri);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"Error reading an image\");\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return React.createElement(ScreenArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(Button, {\n    title: \"Select Image\",\n    onPress: selectImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), React.createElement(Image, {\n    source: {\n      uri: imageUri\n    },\n    style: {\n      width: 200,\n      height: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/jacob/AwesomeProject/App.js"],"names":["React","useEffect","useState","WatchlistScreen","LoginScreen","ImagePicker","ScreenArea","App","imageUri","setImageUri","requestPermission","requestMediaLibraryPermissionsAsync","granted","alert","selectImage","launchImageLibraryAsync","result","cancelled","uri","console","log","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,eAAP;AACA,OAAOC,WAAP;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;;;AAEA,OAAOC,UAAP;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA,kBAEIL,QAAQ,EAFZ;AAAA;AAAA,MAErBM,QAFqB;AAAA,MAEXC,WAFW;;AAK5B,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEL,WAAW,CAACM,mCAAZ,EADF;;AAAA;AAAA;AAChBC,YAAAA,OADgB,yBAChBA,OADgB;AAExB,gBAAI,CAACA,OAAL,EAAcC,KAAK,CAAC,+CAAD,CAAL;;AAFU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAMAZ,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;;AAKA,MAAMI,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEKT,WAAW,CAACU,uBAAZ,EAFL;;AAAA;AAEVC,YAAAA,MAFU;AAIhB,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuBR,WAAW,CAACO,MAAM,CAACE,GAAR,CAAX;AAJP;AAAA;;AAAA;AAAA;AAAA;AAMhBC,YAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAUA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,cAAd;AAA6B,IAAA,OAAO,EAAEN,WAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEI,MAAAA,GAAG,EAAEV;AAAP,KAAf;AAAkC,IAAA,KAAK,EAAE;AAAEa,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport WatchlistScreen from \"./app/screens/WatchlistScreen\";\nimport LoginScreen from \"./app/screens/LoginScreen\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Button, Image, View } from \"react-native\";\nimport ScreenArea from \"./app/components/ScreenArea\";\n\nexport default function App() {\n  //State for the image\n  const [imageUri, setImageUri] = useState();\n\n  //Requesting permission to use media library\n  const requestPermission = async () => {\n    const { granted } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n    if (!granted) alert(\"You need to able permission to access gallery\");\n  };\n\n  //Calling the request permission here as useEffect cant be in async\n  useEffect(() => {\n    requestPermission();\n  }, []);\n\n  //Selecting image\n  const selectImage = async () => {\n    try {\n      const result = await ImagePicker.launchImageLibraryAsync();\n      //If the user doesent cancell\n      if (!result.cancelled) setImageUri(result.uri);\n    } catch (error) {\n      console.log(\"Error reading an image\");\n    }\n  };\n  //Calling the selectImage function on press\n  return (\n    <ScreenArea>\n      <Button title=\"Select Image\" onPress={selectImage} />\n      <Image source={{ uri: imageUri }} style={{ width: 200, height: 200 }} />\n    </ScreenArea>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}